package main

import (
	"fmt"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"

	gost_options "github.com/luojinbo008/gost/cmd/gost-gen-option/options"
)

func main() {

	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, file := range gen.Files {
			if file.Generate {
				generateFile(gen, file)
			}
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + "_gost_option.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	for _, message := range file.Messages {
		generateMessage(gen, g, message)
	}
}

func generateMessage(gen *protogen.Plugin, g *protogen.GeneratedFile, message *protogen.Message) {
	g.P("type Echo", message.GoIdent.GoName, " struct {")

	for _, field := range message.Fields {

		options := field.Desc.Options().(*descriptorpb.FieldOptions)
		tagMap := make(map[string]string)
		if options != nil {
			if proto.HasExtension(options, gost_options.E_GostOption) {
				customDescription := proto.GetExtension(options, gost_options.E_GostOption)
				tagMap = customDescription.(*gost_options.MapField).OptionsDescription
			}
		}
		tag := ""
		for k, v := range tagMap {
			tag += fmt.Sprintf("%s:\"%s\" ", k, v)
		}

		if len(tag) == 0 {
			g.P(field.GoName, " ", field.Desc.Kind().String())
		} else {
			g.P(field.GoName, " ", field.Desc.Kind().String(), " `", tag, "`")
		}
	}
	g.P(message.GoIdent.GoName)
	g.P("}")
	g.P()
}
